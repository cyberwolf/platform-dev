<?php

/**
 * @file
 * Code for the nexteuropa_subscriptions feature.
 */

include_once 'nexteuropa_subscriptions.features.inc';


/**
 * Implements hook_subscriptions_queue_alter().
 */
function nexteuropa_subscriptions_subscriptions_queue_alter(&$event) {

  // No notification for nodes from workbench_moderation_store
  // (=updating_live_revision).
  if (isset($event['node']->workbench_moderation['updating_live_revision']) && $event['node']->workbench_moderation['updating_live_revision']) {
    $event = NULL;
  }

  // Only send notification if the state of the content is published.
  if (isset($event['node']->workbench_moderation_state_new)) {
    // Content has a worbench moderation workflow.
    if ($event['node']->workbench_moderation_state_new != workbench_moderation_state_published()) {
      $event = NULL;
    }
  }
  else {
    // No workbench moderation workflow.
    if ($event['node']->status != 1) {
      $event = NULL;
    }
  }
}

/**
 * Implements hook_menu().
 */
function nexteuropa_subscriptions_menu() {
  $items = array();
  $items['admin/config/system/subscriptions/subscription-block'] = array(
    'title' => 'Subscription Block',
    'description' => 'Configure the subscription block settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nexteuropa_subscriptions_general_settings'),
    'access arguments' => array('administer user subscriptions'),
    // See subscriptions module.
    'weight' => -10,
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'file' => 'includes/nexteuropa_subscriptions.settings.inc',
  );
  return $items;
}

/**
 * Implements hook_mail().
 *
 * Now when drupal_mail() is called and passed $key and $module,
 * the appropriate body and subject will be filled in before the mail is sent.
 */
function nexteuropa_subscriptions_mail($key, &$message, $params) {
  global $language;
  global $base_url;

  switch ($key) {
    case 'subscription':
      $message['subject'] = variable_get('subscribe_subject_' . $language->language, 'Please confirm your subscription');
      $message['body'][] = variable_get('subscribe_message_' . $language->language, 'Please confirm your subscription by clicking the link provided by this mail.');
      // @todo integrate with tokens.
      // @todo make $params an associative array.
      $message['body'][] = $base_url . '/subscribe/' . $params[1];
      break;

    case 'unsubscription':
      $message['subject'] = variable_get('unsubscribe_subject_' . $language->language, 'Please confirm your unsubscription');
      $message['body'][] = variable_get('unsubscribe_message_' . $language->language, 'Please confirm your unsubscription by clicking the link provided by this mail.');
      $message['body'][] = $base_url . '/unsubscribe/' . $params[1];
      break;

  }
}

/**
 * User who filled in the form is entitled to receive the updates.
 */
function _nexteuropa_subscriptions_insert_notification_defaults($uid) {
  // Provide default settings values for subscriptions.
  db_update('subscriptions_user')
    ->fields(array(
      'digest' => 0,
      'send_interval' => 1,
      'send_updates' => 1,
      'send_comments' => 1,
      'send_interval_visible' => 1,
      'send_updates_visible' => 1,
      'send_comments_visible' => 1,
      'autosub_on_post' => 0,
      'autosub_on_update' => 0,
      'autosub_on_comment' => 0,
      'send_self' => 1,
      'suspended' => 0,
    ))
    ->condition('uid', $uid)
    ->execute();
}
